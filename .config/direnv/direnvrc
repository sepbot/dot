use_nvm() {
  set -e
  local node_version=$1
  
  source $NVM_DIR/nvm.sh
  nvm use $node_version
}

cmd_date() {
  if hash gdate 2>/dev/null; then
    gdate "$@"
  else
    date "$@"
  fi
}

use_aws_session() {
  set -e
  local role_arn=$1
  local aws_profile=$2

  local creds_file="$(pwd)/.aws-creds"
  local env_file="$(pwd)/.aws-env"
  local creds=""
  
  local now=$(cmd_date +%s)
  local expires="0"

  if [ -f $creds_file ]; then
    creds=`cat $creds_file`
    expires=$(cmd_date -d $(echo $creds | jq -r .Credentials.Expiration) +%s)
  fi

  if [ $now -gt $expires ]; then
    echo "creating new aws session"
    local token_code=`oathtool -b --totp $AWS_MFA_SECRET`
    creds=`aws sts get-session-token --serial-number $role_arn --token-code $token_code --duration-seconds 129600 --profile $aws_profile`
    echo $creds > $creds_file
    echo AWS_ACCESS_KEY_ID=`echo $creds | jq -r .Credentials.AccessKeyId` > $env_file
    echo AWS_SECRET_ACCESS_KEY=`echo $creds | jq -r .Credentials.SecretAccessKey` >> $env_file
    echo AWS_SESSION_TOKEN=`echo $creds | jq -r .Credentials.SessionToken` >> $env_file
  fi

  export AWS_ACCESS_KEY_ID=`echo $creds | jq -r .Credentials.AccessKeyId`
  export AWS_SECRET_ACCESS_KEY=`echo $creds | jq -r .Credentials.SecretAccessKey`
  export AWS_SESSION_TOKEN=`echo $creds | jq -r .Credentials.SessionToken`

  echo "aws session expires @ $(cmd_date -d $(echo $creds | jq -r .Credentials.Expiration))"
}

